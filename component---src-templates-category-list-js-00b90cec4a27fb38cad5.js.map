{"version":3,"sources":["webpack:///./src/components/postSummary.js","webpack:///./src/templates/category-list.js","webpack:///./src/pages/index.js"],"names":["PostSummary","render","node","this","props","key","fields","slug","style","marginBottom","rhythm","display","justifyContent","alignContent","marginTop","boxShadow","to","frontmatter","category","title","date","charAt","toUpperCase","slice","tags","length","map","t","join","className","Math","floor","readingTime","words","minutes","gridTemplateColumns","fluid","image","childImageSharp","alt","marginRight","minWidth","maxWidth","color","dangerouslySetInnerHTML","__html","description","excerpt","React","Component","CategoryList","data","pageContext","allMarkdownRemark","siteTitle","site","siteMetadata","location","offset","href","id","edges","query","RespLayout","styled","div","RespNav","Nav","BlogIndex","posts","pageQuery"],"mappings":"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","file":"component---src-templates-category-list-js-00b90cec4a27fb38cad5.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nimport styled from \"styled-components\"\n\nimport { rhythm } from \"../utils/typography\"\nimport Image from \"gatsby-image\"\nimport { Minutes } from \"../templates/blog-post\"\n\nexport default class PostSummary extends React.Component {\n  static propTypes = {\n    node: PropTypes.object.isRequired,\n  }\n\n  render() {\n    const { node } = this.props\n    return (\n      <article key={node.fields.slug} style={{ marginBottom: rhythm(2) }}>\n        <header\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignContent: \"bottom\",\n          }}\n        >\n          <h3\n            style={{\n              marginTop: 0,\n              marginBottom: rhythm(1 / 4),\n            }}\n          >\n            <Link\n              style={{ boxShadow: `none` }}\n              to={`/${node.frontmatter.category}${node.fields.slug}`}\n            >\n              {node.frontmatter.title}\n            </Link>\n          </h3>\n          <div>\n            <small>{node.frontmatter.date}</small>\n          </div>\n        </header>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <div>\n            <small>\n              Posted in{\" \"}\n              {node.frontmatter.category.charAt(0).toUpperCase() +\n                node.frontmatter.category.slice(1)}\n            </small>{\" \"}\n            <small>\n              {node.frontmatter.tags &&\n                node.frontmatter.tags.length > 0 &&\n                `with tags ${node.frontmatter.tags\n                  .map(t => t.charAt(0).toUpperCase() + t.slice(1))\n                  .join(\", \")}`}\n            </small>\n          </div>\n          <Minutes>\n            <div className=\"sizer\">\n              <small>\n                {Math.floor(node.fields.readingTime.words / 100) * 100} words\n              </small>\n            </div>\n            <div className=\"min\">\n              <small>\n                {Math.floor(node.fields.readingTime.minutes * 0.8)} min\n              </small>\n            </div>\n            <div className=\"word\">\n              <small>\n                {Math.floor(node.fields.readingTime.words / 100) * 100} words\n              </small>\n            </div>\n          </Minutes>\n        </div>\n        <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 3fr\" }}>\n          <Link\n            style={{ boxShadow: `none` }}\n            to={`/${node.frontmatter.category}${node.fields.slug}`}\n          >\n            <Image\n              fluid={node.frontmatter.image.childImageSharp.fluid}\n              alt={node.frontmatter.title}\n              style={{\n                marginRight: rhythm(1 / 2),\n                marginBottom: 0,\n                minWidth: 50,\n                maxWidth: 300,\n              }}\n            />\n          </Link>\n          <section>\n            <Link\n              style={{ boxShadow: `none`, color: \"#000\" }}\n              to={`/${node.frontmatter.category}${node.fields.slug}`}\n            >\n              <p\n                style={{ marginBottom: rhythm(0.25) }}\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </Link>\n          </section>\n        </div>\n      </article>\n    )\n  }\n}\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport EmailSignup from \"../components/mailsignup\"\nimport { rhythm } from \"../utils/typography\"\nimport Image from \"gatsby-image\"\nimport { Nav, Minutes } from \"../templates/blog-post\"\nimport AnchorLink from \"react-anchor-link-smooth-scroll\"\nimport { RespLayout, RespNav } from \"../pages/index\"\nimport PostSummary from \"../components/postSummary\"\n\nclass CategoryList extends React.Component {\n  render() {\n    const { data } = this.props\n    const { category } = this.props.pageContext\n    const { allMarkdownRemark, site } = data\n    const siteTitle = site.siteMetadata.title || null\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={siteTitle} />\n        <RespNav>\n          <li>\n            <AnchorLink offset=\"100\" href=\"#newsletter\">\n              Newsletter\n            </AnchorLink>\n          </li>\n          <li>\n            <AnchorLink offset=\"100\" href=\"#background\">\n              About\n            </AnchorLink>\n          </li>\n          <li>\n            <AnchorLink offset=\"100\" href=\"#posts\">\n              Posts\n            </AnchorLink>\n          </li>\n        </RespNav>\n        <div className=\"right\" id=\"posts\">\n          <h1>\n            {category.charAt(0).toUpperCase() + category.slice(1)} Articles\n          </h1>\n          <ul>\n            {allMarkdownRemark.edges.map(({ node }) => {\n              return <PostSummary node={node} />\n            })}\n          </ul>\n\n          <hr />\n          <div id=\"background\">\n            <Bio />\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport const query = graphql`\n  query CategoryListQuery($ids: [String]!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(filter: { id: { in: $ids } }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n            readingTime {\n              minutes\n              words\n            }\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            category\n            tags\n            image {\n              childImageSharp {\n                fluid(maxWidth: 300, quality: 100) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default CategoryList\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport Background from \"../components/background\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport EmailSignup from \"../components/mailsignup\"\nimport { rhythm } from \"../utils/typography\"\nimport Image from \"gatsby-image\"\nimport { Nav, Minutes } from \"../templates/blog-post\"\nimport AnchorLink from \"react-anchor-link-smooth-scroll\"\nimport PostSummary from \"../components/postSummary\"\n\nexport const RespLayout = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row-reverse column-reverse;\n  .left {\n    width: 40%;\n    @media (max-width: 700px) {\n      width: 100%;\n    }\n  }\n  .right {\n    width: 55%;\n    @media (max-width: 700px) {\n      width: 100%;\n    }\n  }\n`\n\nexport const RespNav = styled(Nav)`\n  @media (min-width: 700px) {\n    display: none;\n  }\n`\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={siteTitle} />\n        <RespNav>\n          <li>\n            <AnchorLink offset=\"100\" href=\"#newsletter\">\n              Newsletter\n            </AnchorLink>\n          </li>\n          <li>\n            <AnchorLink offset=\"100\" href=\"#background\">\n              About\n            </AnchorLink>\n          </li>\n          <li>\n            <AnchorLink offset=\"100\" href=\"#posts\">\n              Posts\n            </AnchorLink>\n          </li>\n        </RespNav>\n        <RespLayout>\n          <div className=\"left\" style={{ marginRight: rhythm(1) }}>\n            {/* <Bio /> */}\n            <div id=\"newsletter\">\n              <EmailSignup />\n            </div>\n            <hr />\n            <div id=\"background\">\n              <Background />\n            </div>\n          </div>\n          <div className=\"right\" id=\"posts\">\n            {posts.map(({ node }) => {\n              const title = node.frontmatter.title || node.fields.slug\n              return <PostSummary node={node} />\n            })}\n          </div>\n        </RespLayout>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n            readingTime {\n              minutes\n              words\n            }\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            category\n            tags\n            image {\n              childImageSharp {\n                fluid(maxWidth: 300, quality: 100) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}